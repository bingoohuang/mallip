select count(*) from TF_IP_SEGMENT20120816 t where ROWID = 'AAAOi3AAFAAAAtzABW';
SELECT B.*, B.ROWID
    FROM IPGEO_BLOCKS B WHERE B.PROVINCE_NAME = '湖北' AND B.CITY_NAME = '仙桃';
    SELECT count(*) FROM IPGEO_LOCATIONS T WHERE T.BLOCK_ID = '071|713';

create table TF_IP_SEGMENT20120816_ERR(
  err VARCHAR2(1024) not null
);
   
select * from TF_IP_SEGMENT20120816_ERR;
select count(*) from TF_IP_SEGMENT20120816 t where  t.city is  null order by t.bip ,t.eip;
select * from IPGEO_LOCATIONS t where 3545999872 between t.lbip and t.leip;


--采取TF_IP_SEGMENT20120816_ERR中数据到IPGEO_LOCATIONS
UPDATE TF_IP_SEGMENT20120816 t 
SET T.BLOCK_ID = (SELECT B.PROVINCE_CODE || '|' || B.CITY_CODE 
    FROM IPGEO_BLOCKS B WHERE B.PROVINCE_NAME = T.PROV_NAME AND B.CITY_NAME = T.CITY_NAME)
WHERE T.CITY_NAME IS NOT NULL;

--修正：延吉->延边
UPDATE TF_IP_SEGMENT20120816 t 
SET T.BLOCK_ID = '090|909'
WHERE T.CITY_NAME IS NOT NULL AND T.BLOCK_ID IS NULL AND T.PROV_NAME = '吉林' AND T.CITY_NAME = '延吉' ;
--修正：江汉->仙桃
UPDATE TF_IP_SEGMENT20120816 t 
SET T.BLOCK_ID = '071|713'
WHERE T.CITY_NAME IS NOT NULL AND T.BLOCK_ID IS NULL AND T.PROV_NAME = '湖北' AND T.CITY_NAME = '江汉' ;

-- 修正：没有地市的，默认归属到省会
select * from IPGEO_PROVINCE t;
UPDATE TF_IP_SEGMENT20120816 t 
SET T.CAPITAL = (SELECT P.CAPITAL FROM IPGEO_PROVINCE P WHERE P.PROVINCE = T.PROV_NAME)
WHERE T.CITY_NAME IS  NULL;

UPDATE TF_IP_SEGMENT20120816 t 
SET T.BLOCK_ID = (SELECT B.PROVINCE_CODE || '|' || B.CITY_CODE 
    FROM IPGEO_BLOCKS B WHERE B.PROVINCE_NAME = T.PROV_NAME AND B.CITY_NAME = T.CAPITAL)
WHERE T.CITY_NAME IS NULL;

SELECT * FROM TF_IP_SEGMENT20120816 T WHERE T.BLOCK_ID IS NULL AND T.CITY_NAME IS  NULL;

DECLARE
   V_NUM INT;
BEGIN
  FOR V_CUR IN (SELECT T.PROV_NAME, T.CITY_NAME, T.ROWID FROM TF_IP_SEGMENT20120816 T WHERE T.CITY_NAME IS NOT NULL) LOOP
    SELECT COUNT(1) INTO  V_NUM
    FROM IPGEO_BLOCKS B WHERE B.PROVINCE_NAME = V_CUR.PROV_NAME AND B.CITY_NAME = V_CUR.CITY_NAME;
    IF V_NUM > 1 THEN
      INSERT INTO TF_IP_SEGMENT20120816_ERR(ERR)
      VALUES('>1' || V_CUR.ROWID);
      END IF;
    END LOOP;
  END;


--合并TF_IP_SEGMENT20120816_ERR中号段相连的记录(按照BLOCK_ID)
DECLARE
    V_LAST_LBIP    TF_IP_SEGMENT20120816.BIP%TYPE;
    V_LAST_LEIP    TF_IP_SEGMENT20120816.EIP%TYPE;
    V_LAST_BIP     TF_IP_SEGMENT20120816.BEGINIP%TYPE;
    V_LAST_EIP     TF_IP_SEGMENT20120816.ENDIP%TYPE;
    V_LAST_PROV    TF_IP_SEGMENT20120816.PROV%TYPE;
    V_LAST_PROV_NAME    TF_IP_SEGMENT20120816.PROV_NAME%TYPE;
    V_LAST_CITY    TF_IP_SEGMENT20120816.CITY%TYPE;
    V_LAST_CITY_NAME    TF_IP_SEGMENT20120816.CITY_NAME%TYPE;
    V_LAST_BLOCK_ID TF_IP_SEGMENT20120816.BLOCK_ID%TYPE;
    V_LAST_ROWID   ROWID;
    V_LAST_NUM     INT;
    V_ERR          TF_IP_SEGMENT20120816_ERR.ERR%TYPE;
BEGIN

    FOR V_LOC IN (SELECT L.BEGINIP BIP, L.ENDIP EIP, L.BIP LBIP, L.EIP LEIP, L.PROV, L.PROV_NAME, L.CITY, L.CITY_NAME, L.BLOCK_ID, L.ROWID
                    FROM TF_IP_SEGMENT20120816 L
                   ORDER BY L.BIP, L.EIP) LOOP
        V_ERR := NULL;            
        IF V_LOC.LBIP > V_LOC.LEIP THEN
            V_ERR := 'lbip>leip';
        ELSIF IPTOINT(V_LOC.BIP) != V_LOC.LBIP THEN
            V_ERR := 'bip!=lbip';
        ELSIF IPTOINT(V_LOC.EIP) != V_LOC.LEIP THEN
            V_ERR := 'eip!=leip';
        END IF;
    
        IF V_ERR IS NOT NULL THEN
            INSERT INTO TF_IP_SEGMENT20120816_ERR(ERR)
            VALUES
                (V_LOC.BIP || ',' || V_LOC.EIP|| ',' || V_LOC.LBIP|| ',' || V_LOC.LEIP|| ',' 
                || V_LOC.PROV||',' || V_LOC.PROV_NAME||',' || V_LOC.CITY||',' || V_LOC.CITY_NAME|| ',' || V_ERR);
        
            DELETE FROM TF_IP_SEGMENT20120816 WHERE ROWID = V_LOC.ROWID;
            GOTO END_LOOP;
        END IF;
 
        -- first time in loop
        IF V_LAST_LEIP + 1 = V_LOC.LBIP AND V_LAST_BLOCK_ID = V_LOC.BLOCK_ID THEN
            DELETE FROM TF_IP_SEGMENT20120816 WHERE ROWID = V_LAST_ROWID;
            V_LAST_EIP   := V_LOC.EIP;
            V_LAST_LEIP  := V_LOC.LEIP;
            V_LAST_ROWID := V_LOC.ROWID;
            V_LAST_NUM   := V_LAST_NUM + 1;
            GOTO END_LOOP;
        END IF;
        
        IF V_LOC.LBIP <= V_LAST_LEIP THEN
            INSERT INTO TF_IP_SEGMENT20120816_ERR(ERR)
             VALUES
                (V_LOC.BIP || ',' || V_LOC.EIP|| ',' || V_LOC.LBIP|| ',' || V_LOC.LEIP|| ',' 
                || V_LOC.PROV||',' || V_LOC.PROV_NAME||',' || V_LOC.CITY||',' || V_LOC.CITY_NAME|| ',' || 'overlaps last eip ' || V_LAST_LEIP);
        
            DELETE FROM TF_IP_SEGMENT20120816 WHERE ROWID = V_LOC.ROWID;
            GOTO END_LOOP;
        END IF;
    
        IF V_LAST_NUM > 1 THEN
            UPDATE TF_IP_SEGMENT20120816 L SET L.BEGINIP = V_LAST_BIP, L.BIP = V_LAST_LBIP WHERE ROWID = V_LAST_ROWID;
        END IF;
    
        <<ASSIGN_TAG>>
        V_LAST_NUM     := 1;
        V_LAST_LBIP    := V_LOC.LBIP;
        V_LAST_LEIP    := V_LOC.LEIP;
        V_LAST_BIP     := V_LOC.BIP;
        V_LAST_EIP     := V_LOC.EIP;
        V_LAST_PROV    := V_LOC.PROV;
        V_LAST_PROV_NAME    := V_LOC.PROV_NAME;
        V_LAST_CITY    := V_LOC.CITY;
        V_LAST_CITY_NAME:= V_LOC.CITY_NAME;
        V_LAST_ROWID   := V_LOC.ROWID;
        V_LAST_BLOCK_ID := V_LOC.BLOCK_ID;
    
        <<END_LOOP>> -- not allowed unless an executable statement follows
        NULL; -- add NULL statement to avoid error
    END LOOP;
    IF V_LAST_NUM > 1 THEN
        UPDATE TF_IP_SEGMENT20120816 L SET L.BEGINIP = V_LAST_BIP, L.BIP = V_LAST_LBIP WHERE ROWID = V_LAST_ROWID;
    END IF;
END;


--合并TF_IP_SEGMENT20120816_ERR中号段相连的记录(按省/市)
DECLARE
    V_LAST_LBIP    TF_IP_SEGMENT20120816.BIP%TYPE;
    V_LAST_LEIP    TF_IP_SEGMENT20120816.EIP%TYPE;
    V_LAST_BIP     TF_IP_SEGMENT20120816.BEGINIP%TYPE;
    V_LAST_EIP     TF_IP_SEGMENT20120816.ENDIP%TYPE;
    V_LAST_PROV    TF_IP_SEGMENT20120816.PROV%TYPE;
    V_LAST_PROV_NAME    TF_IP_SEGMENT20120816.PROV_NAME%TYPE;
    V_LAST_CITY    TF_IP_SEGMENT20120816.CITY%TYPE;
    V_LAST_CITY_NAME    TF_IP_SEGMENT20120816.CITY_NAME%TYPE;
    V_LAST_ROWID   ROWID;
    V_LAST_NUM     INT;
    V_ERR          TF_IP_SEGMENT20120816_ERR.ERR%TYPE;
BEGIN

    FOR V_LOC IN (SELECT TRIM(L.BEGINIP) BIP, TRIM(L.ENDIP) EIP, L.BIP LBIP, L.EIP LEIP, L.PROV, L.PROV_NAME, L.CITY, L.CITY_NAME, L.ROWID
                    FROM TF_IP_SEGMENT20120816 L
                   ORDER BY L.BIP, L.EIP) LOOP
        V_ERR := NULL;            
        IF V_LOC.LBIP > V_LOC.LEIP THEN
            V_ERR := 'lbip>leip';
        ELSIF IPTOINT(V_LOC.BIP) != V_LOC.LBIP THEN
            V_ERR := 'bip!=lbip';
        ELSIF IPTOINT(V_LOC.EIP) != V_LOC.LEIP THEN
            V_ERR := 'eip!=leip';
        END IF;
    
        IF V_ERR IS NOT NULL THEN
            INSERT INTO TF_IP_SEGMENT20120816_ERR(ERR)
            VALUES
                (V_LOC.BIP || ',' || V_LOC.EIP|| ',' || V_LOC.LBIP|| ',' || V_LOC.LEIP|| ',' 
                || V_LOC.PROV||',' || V_LOC.PROV_NAME||',' || V_LOC.CITY||',' || V_LOC.CITY_NAME|| ',' || V_ERR);
        
            DELETE FROM TF_IP_SEGMENT20120816 WHERE ROWID = V_LOC.ROWID;
            GOTO END_LOOP;
        END IF;
 
        -- first time in loop
        IF V_LAST_LEIP + 1 = V_LOC.LBIP AND V_LAST_PROV = V_LOC.PROV AND (V_LAST_CITY = V_LOC.CITY OR V_LAST_CITY IS NULL AND V_LOC.CITY IS NULL) THEN
            DELETE FROM TF_IP_SEGMENT20120816 WHERE ROWID = V_LAST_ROWID;
            V_LAST_EIP   := V_LOC.EIP;
            V_LAST_LEIP  := V_LOC.LEIP;
            V_LAST_ROWID := V_LOC.ROWID;
            V_LAST_NUM   := V_LAST_NUM + 1;
            GOTO END_LOOP;
        END IF;
        
        IF V_LOC.LBIP <= V_LAST_LEIP THEN
            INSERT INTO TF_IP_SEGMENT20120816_ERR(ERR)
             VALUES
                (V_LOC.BIP || ',' || V_LOC.EIP|| ',' || V_LOC.LBIP|| ',' || V_LOC.LEIP|| ',' 
                || V_LOC.PROV||',' || V_LOC.PROV_NAME||',' || V_LOC.CITY||',' || V_LOC.CITY_NAME|| ',' || 'overlaps last eip ' || V_LAST_LEIP);
        
            DELETE FROM TF_IP_SEGMENT20120816 WHERE ROWID = V_LOC.ROWID;
            GOTO END_LOOP;
        END IF;
    
        IF V_LAST_NUM > 1 THEN
            UPDATE TF_IP_SEGMENT20120816 L SET L.BEGINIP = V_LAST_BIP, L.BIP = V_LAST_LBIP WHERE ROWID = V_LAST_ROWID;
        END IF;
    
        <<ASSIGN_TAG>>
        V_LAST_NUM     := 1;
        V_LAST_LBIP    := V_LOC.LBIP;
        V_LAST_LEIP    := V_LOC.LEIP;
        V_LAST_BIP     := V_LOC.BIP;
        V_LAST_EIP     := V_LOC.EIP;
        V_LAST_PROV    := V_LOC.PROV;
        V_LAST_PROV_NAME    := V_LOC.PROV_NAME;
        V_LAST_CITY    := V_LOC.CITY;
        V_LAST_CITY_NAME:= V_LOC.CITY_NAME;
        V_LAST_ROWID   := V_LOC.ROWID;
    
        <<END_LOOP>> -- not allowed unless an executable statement follows
    
        NULL; -- add NULL statement to avoid error
    END LOOP;
    IF V_LAST_NUM > 1 THEN
        UPDATE TF_IP_SEGMENT20120816 L SET L.BEGINIP = V_LAST_BIP, L.BIP = V_LAST_LBIP WHERE ROWID = V_LAST_ROWID;
    END IF;
END;

SELECT * FROM (SELECT * FROM (SELECT * FROM IPGEO_LOCATIONS T WHERE T.BLOCK_ID = '076|768' ORDER BY T.LBIP, T.LEIP) O  WHERE O.LEIP >= 1932640768) P WHERE  P.LBIP <= 1932656639 + 1 ;
SELECT * FROM TF_IP_SEGMENT20120816 T WHERE T.BIP = 1932640768;
SELECT COUNT(*) FROM TF_IP_SEGMENT20120816 T WHERE T.MERGE_STATUS <> 'MERGED';
-- 1	115.49.194.0	115.49.255.255	076	河南	768	商丘	1932640768	1932656639	076|768		

SELECT INTTOIP(16777472) FROM DUAL;
SELECT IPTOINT('1.0.1.0') FROM DUAL;

SELECT * FROM TF_IP_SEGMENT20120816_REVISED WHERE MERGE_STATUS  not IN ('MERGED OK');	
SELECT COUNT(*) FROM IPGEO_LOCATIONS T ORDER BY T.LBIP, T.LEIP ;	
SELECT * FROM TF_IP_SEGMENT20120816 T ORDER BY T.BIP, T.EIP;

SELECT T.*,  T.ROWID FROM IPGEO_LOCATIONS T WHERE T.LBIP = 28835840 OR T.LEIP = 28901375 ORDER BY T.LBIP, T.LEIP

SELECT * FROM (SELECT * FROM (SELECT T.*,  T.ROWID FROM IPGEO_LOCATIONS T ORDER BY T.LBIP, T.LEIP) O  
           WHERE O.LEIP >= 2052678400 ) P WHERE  (P.LBIP <= 2052678655 OR P.LBIP > 2052678655 AND P.LEIP <= 2052678655);  

--合并TF_IP_SEGMENT20120816和IPGEO_LOCATIONS
--CREATE OR REPLACE PROCEDURE SP_MERGE_IP AS
DECLARE 
    V_NUM INT;
    V_LBIP IPGEO_LOCATIONS.LBIP%TYPE;
    V_LEIP IPGEO_LOCATIONS.LEIP%TYPE;
    V_CONFICT INT;
    V_ERR VARCHAR2(1024);
BEGIN
    FOR V_C IN   (SELECT L.BEGINIP BIP, L.ENDIP EIP, L.BIP LBIP, L.EIP LEIP, L.BLOCK_ID, L.ROWID
             FROM TF_IP_SEGMENT20120816 L                       
                        ORDER BY L.BIP, L.EIP) LOOP
       -- 看是否在IPGEO_LOCATIONS中存在冲突
       V_NUM := 0;   
       V_CONFICT := 0;
       V_LBIP := V_C.LBIP;
       V_LEIP := V_C.LEIP;
       V_ERR := 'OK';
         
       --WHERE T.BLOCK_ID = V_C.BLOCK_ID
       FOR V_D IN (SELECT * FROM (SELECT * FROM (SELECT T.*,  T.ROWID FROM IPGEO_LOCATIONS T ORDER BY T.LBIP, T.LEIP) O  
           WHERE O.LEIP >= V_C.LBIP) P WHERE  (P.LBIP <= V_C.LEIP OR P.LBIP > V_C.LEIP AND P.LEIP <= V_C.LEIP) ) LOOP
         V_NUM := V_NUM + 1;
         V_LBIP := LEAST(V_LBIP, V_D.LBIP);
         V_LEIP := GREATEST(V_LEIP, V_D.LEIP);
         
         IF V_D.BLOCK_ID != V_C.BLOCK_ID THEN V_CONFICT := 1; V_ERR := '1...* block ids'; GOTO OUT_INNER_LOOP; END IF; 

         IF V_NUM > 15 THEN 
            GOTO OUT_INNER_LOOP; 
         END IF;
       END LOOP;
       <<OUT_INNER_LOOP>>

       BEGIN
         IF V_CONFICT = 0 AND V_NUM = 0 THEN 
           INSERT INTO IPGEO_LOCATIONS(BIP, EIP, BLOCK_ID, LBIP, LEIP)
           VALUES(V_C.BIP, V_C.EIP, V_C.BLOCK_ID, V_C.LBIP, V_C.LEIP);
         ELSIF V_CONFICT = 0 AND V_NUM > 0 THEN
             DELETE FROM IPGEO_LOCATIONS WHERE ROWID IN (SELECT RN FROM (SELECT * FROM (SELECT * FROM (SELECT T.*, T.ROWID RN FROM IPGEO_LOCATIONS T ORDER BY T.LBIP, T.LEIP) O  
           WHERE O.LEIP >= V_C.LBIP) P WHERE   (P.LBIP <= V_C.LEIP OR P.LBIP > V_C.LEIP AND P.LEIP <= V_C.LEIP) ));
             INSERT INTO IPGEO_LOCATIONS(BIP, EIP, BLOCK_ID, LBIP, LEIP)
             VALUES(INTTOIP(V_LBIP), INTTOIP(V_LEIP), V_C.BLOCK_ID, V_LBIP, V_LEIP);
         END IF;
       EXCEPTION WHEN OTHERS THEN
         V_CONFICT :=1;
         V_ERR := SQLERRM;
       END;
       
       UPDATE TF_IP_SEGMENT20120816 SET MERGE_STATUS = DECODE(V_CONFICT, 1, 'CONFLICTS ', 'MERGED ') || V_ERR WHERE ROWID = V_C.ROWID;
       
    END LOOP;
  END;
  
  
  --合并IPGEO_LOCATIONS中号段相连的记录(按照BLOCK_ID)
DECLARE
    V_LAST_LBIP    IPGEO_LOCATIONS.LBIP%TYPE;
    V_LAST_LEIP    IPGEO_LOCATIONS.LEIP%TYPE;
    V_LAST_BIP     IPGEO_LOCATIONS.BIP%TYPE;
    V_LAST_EIP     IPGEO_LOCATIONS.EIP%TYPE;
    V_LAST_BLOCK_ID IPGEO_LOCATIONS.BLOCK_ID%TYPE;
    V_LAST_ROWID   ROWID;
    V_LAST_NUM     INT;
    V_ERR          TF_IP_SEGMENT20120816_ERR.ERR%TYPE;
BEGIN

    FOR V_LOC IN (SELECT  BIP,  EIP, LBIP,  LEIP,  L.BLOCK_ID, L.ROWID
                    FROM IPGEO_LOCATIONS L
                   ORDER BY L.LBIP, L.LEIP) LOOP
        V_ERR := NULL;            
        IF V_LOC.LBIP > V_LOC.LEIP THEN
            V_ERR := 'lbip>leip';
        ELSIF IPTOINT(V_LOC.BIP) != V_LOC.LBIP THEN
            V_ERR := 'bip!=lbip';
        ELSIF IPTOINT(V_LOC.EIP) != V_LOC.LEIP THEN
            V_ERR := 'eip!=leip';
        END IF;
    
        IF V_ERR IS NOT NULL THEN
            INSERT INTO TF_IP_SEGMENT20120816_ERR(ERR)
            VALUES (V_LOC.BIP || ',' || V_LOC.EIP|| ',' || V_LOC.LBIP|| ',' || V_LOC.LEIP|| ','  || V_LOC.BLOCK_ID || ',' || V_ERR);
        
            DELETE FROM IPGEO_LOCATIONS WHERE ROWID = V_LOC.ROWID;
            GOTO END_LOOP;
        END IF;
 
        -- first time in loop
        IF V_LAST_LEIP + 1 = V_LOC.LBIP AND V_LAST_BLOCK_ID = V_LOC.BLOCK_ID THEN
            DELETE FROM IPGEO_LOCATIONS WHERE ROWID = V_LAST_ROWID;
            V_LAST_EIP   := V_LOC.EIP;
            V_LAST_LEIP  := V_LOC.LEIP;
            V_LAST_ROWID := V_LOC.ROWID;
            V_LAST_NUM   := V_LAST_NUM + 1;
            GOTO END_LOOP;
        END IF;
        
        IF V_LOC.LBIP <= V_LAST_LEIP THEN
            INSERT INTO TF_IP_SEGMENT20120816_ERR(ERR)
             VALUES (V_LOC.BIP || ',' || V_LOC.EIP|| ',' || V_LOC.LBIP|| ',' || V_LOC.LEIP|| ',' || V_LOC.BLOCK_ID || ',' || V_ERR);
        
            DELETE FROM IPGEO_LOCATIONS WHERE ROWID = V_LOC.ROWID;
            GOTO END_LOOP;
        END IF;
    
        IF V_LAST_NUM > 1 THEN
            UPDATE IPGEO_LOCATIONS L SET L.BIP = V_LAST_BIP, L.LBIP = V_LAST_LBIP WHERE ROWID = V_LAST_ROWID;
        END IF;
    
        <<ASSIGN_TAG>>
        V_LAST_NUM     := 1;
        V_LAST_LBIP    := V_LOC.LBIP;
        V_LAST_LEIP    := V_LOC.LEIP;
        V_LAST_BIP     := V_LOC.BIP;
        V_LAST_EIP     := V_LOC.EIP;
        V_LAST_ROWID   := V_LOC.ROWID;
        V_LAST_BLOCK_ID := V_LOC.BLOCK_ID;
    
        <<END_LOOP>> -- not allowed unless an executable statement follows
        NULL; -- add NULL statement to avoid error
    END LOOP;
    IF V_LAST_NUM > 1 THEN
        UPDATE IPGEO_LOCATIONS L SET L.BIP = V_LAST_BIP, L.LBIP  = V_LAST_LBIP WHERE ROWID = V_LAST_ROWID;
    END IF;
END;
